/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for slope calculations. Only authenticated users can perform calculations, and they can only access their own calculations. Anonymous authentication is enabled.
 * @dataStructure
 *  - All slope calculation data is stored in the `/slope_calculations/{slopeCalculationId}` collection.
 *  - Each document in this collection represents a single calculation.
 *  - The `userId` field within each document indicates the owner of the calculation.
 * @keySecurityDecisions
 *  - Users can only list calculations.
 *  - Data schema validation is relaxed for rapid prototyping. The rule only enforces that `userId` matches the authenticated user's UID on creation.
 * @denormalizationForAuthorization
 *  - The `userId` field is denormalized directly into the `/slope_calculations/{slopeCalculationId}` documents. This allows rules to quickly verify ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /slope_calculations collection.
     * @path /slope_calculations/{slopeCalculationId}
     * @allow (list) Authenticated user can list all slope_calculations.
     * @deny (list) Unauthenticated user can not list slope_calculations.
     * @allow (create) Authenticated user can create a new slope calculation if the userId matches their own UID.
     * @deny (create) Authenticated user can not create a new slope calculation if the userId does not match their own UID.
     * @deny (update) Authenticated user can not update other user's slope calculations.
     * @deny (delete) Authenticated user can not delete other user's slope calculations.
     * @principle Enforces document ownership for writes and allows public reads. Validates relational integrity on create.
     */
    match /slope_calculations/{slopeCalculationId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document.
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      
      // Helper function to check if the existing user is the owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow anyone to read the collection.
      allow get: if true;
      allow list: if isSignedIn();

      // Only allow authenticated users to create slope calculations with a matching userId.
      allow create: if isOwner(request.resource.data.userId);

      // Only the owner can update the slope calculation.
      allow update: if isExistingOwner(resource.data.userId);

      // Only the owner can delete the slope calculation.
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}