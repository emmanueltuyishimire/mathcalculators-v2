/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a user-ownership model for slope calculations. Each calculation is associated with a specific user, who has full CRUD access. Read access is public.
 * @data_structure Slope calculations are stored in the `/slope_calculations/{slopeCalculationId}` collection. Each document contains the calculation input and output data, along with the `userId` of the user who created it.
 * @key_security_decisions
 *   - Public Read: Read access to slope calculations is public.
 *   - Owner-Only Writes: Only the owner (creator) of a slope calculation can modify or delete it.
 *   - Ownership Enforcement: The `userId` field in each document is used to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects slope calculation documents. Allows public reads, but restricts writes to the owner.
     * @path /slope_calculations/{slopeCalculationId}
     * @allow (get, list): Any user can read slope calculations.
     * @allow (create): Only the authenticated user can create slope calculations where the userId matches their own.
     * @allow (update, delete): Only the owner of the slope calculation can modify or delete it.
     * @deny (create): An unauthenticated user cannot create slope calculations.
     * @deny (update, delete): A user cannot modify or delete a slope calculation they don't own.
     * @principle Enforces document ownership for writes and public read access.
     */
    match /slope_calculations/{slopeCalculationId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.userId);
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the document.
     * @param userId The user ID stored in the document.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param userId The user ID stored in the document.
     * @return True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}